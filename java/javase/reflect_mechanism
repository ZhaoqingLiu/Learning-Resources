反射

1、反射机制

JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法。
对于任意一个对象，都能够调用它的任意一个方法和属性。
这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。
2、反射

反射是把java类中的各种成分映射成一个个的Java对象
加载是class文件读入内存，并为之创建一个Class对象。
利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。
java.lang.Class
1、继承了 java.lang.Object 类，实现了 java.lang.reflect.Type 等接口

Class 类的实例表示正在运行的 Java 应用程序中的类和接口。
枚举 ( enum ) 是一种类，注解 ( @interface )  是一种接口。
USer、Role类就是Class的实例对象,Class是对类的描述，即类类型。
class类的实例表示java应用运行时的类(class ans enum)或接口(interface and annotation)。
数组同样也被映射为为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。
基本类型boolean，byte，char，short，int，long，float，double和关键字void同样表现为 class 对象。
2、Class类没有公有的构造方法，它由JVM自动调用，我有如下3种方式获取Class

某个对象实例的getClass()方法，如new User().getClass()。
某个类名.class属性，如User.class（任何数据类型（包括基本数据类型）都有一个“静态”的class属性）。
通过Class.forName("类名")获取。
三种方式常用第三种，第一种对象都有了还要反射干什么。第二种需要导入类的包，依赖太强，不导包就抛编译错误。一般都第三种，一个字符串可以传入也可写在配置文件中等多种方法。
2、常用的静态方法:

static  Class<?>    forName( String className ) 返回与带有给定字符串名的类或接口相关联的 Class 对象。
static  Class<?>    forName( String name , boolean initialize , ClassLoader loader ) 使用给定的类加载器，返回与带有给定字符串名的类或接口相关联的 Class 对象。
3、 常用的非静态方法:

String    getName()  以 String 的形式返回此 Class 对象所表示的实体（类、接口、数组类、基本类型或 void）名称。
String    getSimpleName()  返回源代码中给出的底层类的简称。
String    getCanonicalName()  返回 Java Language Specification 中所定义的底层类的规范化名称。
Class<? super T>    getSuperclass()  返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的超类的 Class。
Class<?>[]    getInterfaces()  确定此对象所表示的类实现的接口 或 此对象所表示的接口所继承的接口。
ClassLoader    getClassLoader()  返回该类的类加载器。
int getModifiers() 以 int 形式返回该类的修饰符。
boolean    isAnnotation() 如果当前类型所表示的是一个 [注解] 则返回 true ，否则返回 false。
boolean    isArray() 如果当前类型所表示的是一个 [数组] 则返回 true ，否则返回 false。
boolean    isEnum() 如果当前类型所表示的是一个 [枚举] 则返回 true ，否则返回 false。
boolean    isInterface() 如果当前类型所表示的是一个 [接口] 则返回 true ，否则返回 false。
Class<?>[] getClasses()获取该类的父类或接口
T newInstance 创建此 Class 对象所表示的类的一个新实例。
4、获得某个类中的属性的非静态方法:

Field   getDeclaredField( String name ) 获得在本类中直接声明（ private  、默认 、protected 、public）指定名称的属性( Field )对象。
Field[]   getDeclaredFields() 获得由本类直接声明的所有的属性组成的 Field 数组。
Field   getField( String name ) 获得本类中或父类中声明的 public 修饰的指定名称的属性对应的Field对象。
Field[]   getFields()  获得本类中或父类中声明的、由 public 修饰的所有的属性组成的 Field 数组。
获得某个类中的属性测试案例一：
